# Generated by Django 4.2.10 on 2024-02-13 09:44

from django.db import migrations, models
import django.db.models.deletion
import payment.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="PGPaymentRequestLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "store_id",
                    models.CharField(
                        error_messages={"null": "store_id cannot be null"},
                        help_text="Merchant ID Provided by aamarPay",
                        max_length=50,
                        verbose_name="store id",
                    ),
                ),
                (
                    "tran_id",
                    models.CharField(
                        error_messages={"null": "tran_id cannot be null"},
                        help_text="The identification number or order ID, or invoice number",
                        max_length=50,
                        verbose_name="transaction id",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        error_messages={"blank": "amount paid by a user must be provided"},
                        help_text=" the total amount you wish to pay for the transaction.",
                        max_digits=15,
                        verbose_name="amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "USD"), ("BDT", "BDT")],
                        default="BDT",
                        error_messages={"null": "currency cannot be null"},
                        help_text="The currency field should only contain uppercase letters corresponding to the desired currency",
                        max_length=5,
                        verbose_name="currency",
                    ),
                ),
                (
                    "desc",
                    models.TextField(
                        error_messages={"null": "details cannot be null"},
                        help_text="he description field allows the payer to provide additional information or notes related to the payment.",
                        max_length=200,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "cus_name",
                    models.CharField(
                        error_messages={"null": "customer name cannot be null"},
                        help_text="Customer Full Name",
                        max_length=50,
                        verbose_name="customer name",
                    ),
                ),
                (
                    "cus_email",
                    models.EmailField(
                        error_messages={"null": "customer email cannot be null"},
                        help_text="Customer Email Address",
                        max_length=30,
                        verbose_name="customer email",
                    ),
                ),
                (
                    "cus_phone",
                    models.CharField(
                        error_messages={"null": "Customer Phone cannot be null"},
                        help_text="Phone number of the customer who is making the payment.",
                        max_length=15,
                        validators=[payment.validators.validate_phone_number],
                        verbose_name="customer Phone",
                    ),
                ),
                (
                    "success_url",
                    models.URLField(
                        error_messages={"null": "success URL cannot be null"},
                        help_text="The success_url is the designated URL to which the payment gateway will redirect customers after a successful payment transaction.",
                        verbose_name="success URL",
                    ),
                ),
                (
                    "fail_url",
                    models.URLField(
                        error_messages={"null": "fail URL cannot be null"},
                        help_text="The fail_url is the designated URL to which the payment gateway will redirect customers after a failed payment transaction.",
                        verbose_name="fail URL",
                    ),
                ),
                (
                    "cancel_url",
                    models.URLField(
                        error_messages={"null": "cancel URL cannot be null"},
                        help_text="\tURL to return customers to your product page or home page.",
                        verbose_name="cancel URL",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The timestamp when the request was made to the API",
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "PG payment Request log",
                "verbose_name_plural": "PG payment request logs",
                "db_table_comment": "PG payment request logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PGPaymentResponseLog",
            fields=[
                (
                    "pg_payment_request",
                    models.OneToOneField(
                        error_messages={
                            "null": "the payment request must be provided",
                            "unique": "the request instance must be unique",
                        },
                        help_text="the pg payment request from which the response was generated",
                        on_delete=django.db.models.deletion.RESTRICT,
                        primary_key=True,
                        related_name="respone_from_pg_payment_request",
                        serialize=False,
                        to="payment.pgpaymentrequestlog",
                        verbose_name="pg payment request",
                    ),
                ),
                (
                    "pg_service_charge_bdt",
                    models.CharField(
                        error_messages={"null": "pg service charge cannot be null"},
                        help_text="The service charge for the payment gateway is calculated in Bangladeshi Taka (BDT).",
                        max_length=50,
                        verbose_name="pg service charge bdt",
                    ),
                ),
                (
                    "amount_original",
                    models.CharField(
                        error_messages={"blank": "amount original paid by a user must be provided"},
                        help_text="The amount paid by the customer in Bangladeshi Taka (BDT).",
                        max_length=15,
                        verbose_name="amount original",
                    ),
                ),
                (
                    "card_number",
                    models.CharField(
                        blank=True,
                        help_text="card number",
                        max_length=20,
                        null=True,
                        verbose_name="card number",
                    ),
                ),
                (
                    "status_code",
                    models.CharField(
                        error_messages={"null": "status code cannot be null"},
                        help_text="A status code of 2 signifies a successful transaction, whereas a status code of 7 indicates a failed transaction.",
                        max_length=10,
                        verbose_name="status code",
                    ),
                ),
                (
                    "pay_status",
                    models.CharField(
                        error_messages={"null": "pay status cannot be null"},
                        help_text="The payment status in text format (e.g., Successful or Failed).",
                        max_length=50,
                        verbose_name="pay status",
                    ),
                ),
                (
                    "currency_merchant",
                    models.CharField(
                        error_messages={"null": "currency merchant cannot be null"},
                        help_text="This refers to the currency that you have forwarded to the payment gateway.",
                        max_length=10,
                        verbose_name="currency merchant status",
                    ),
                ),
                (
                    "convertion_rate",
                    models.CharField(
                        error_messages={"null": "convertion rate cannot be null"},
                        help_text="If you submit currency in USD to the gateway, you are aware of the conversion rate from this end.",
                        max_length=10,
                        verbose_name="convertion rate status",
                    ),
                ),
                (
                    "pg_txnid",
                    models.CharField(
                        error_messages={"null": "pg transaction id cannot be null"},
                        help_text="This is the unique transaction ID provided by the Payment Gateway for each transaction.",
                        max_length=100,
                        verbose_name="pg transaction id",
                    ),
                ),
                (
                    "mer_txnid",
                    models.CharField(
                        error_messages={"null": "merchant transaction id cannot be null"},
                        help_text="The unique transaction ID which is created on merchant end",
                        max_length=100,
                        verbose_name="merchant transaction id",
                    ),
                ),
                (
                    "store_id",
                    models.CharField(
                        error_messages={"null": "store id cannot be null"},
                        help_text="Unique ID for every merchant",
                        max_length=100,
                        verbose_name="store id",
                    ),
                ),
                (
                    "merchant_id",
                    models.CharField(
                        error_messages={"null": "merchant id cannot be null"},
                        help_text="Unique ID for every merchant",
                        max_length=100,
                        verbose_name="merchant id",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        error_messages={"null": "currency cannot be null"},
                        help_text="This field will provide information about in which currency the customer has paid the money",
                        max_length=100,
                        verbose_name="currency",
                    ),
                ),
                (
                    "store_amount",
                    models.CharField(
                        error_messages={"blank": "store amount must be provided"},
                        help_text="After deducting the payment gateway charge, this amount will the merchant get.",
                        max_length=15,
                        verbose_name="store amount",
                    ),
                ),
                (
                    "pay_time",
                    models.DateTimeField(help_text="\tPayment Time", verbose_name="pay time"),
                ),
                (
                    "amount",
                    models.CharField(
                        error_messages={"blank": "amount must be provided"},
                        help_text="The amount the customer has paid",
                        max_length=15,
                        verbose_name="amount",
                    ),
                ),
                (
                    "bank_txn",
                    models.CharField(
                        error_messages={"null": "bank transaction number cannot be null"},
                        help_text="Bank Transaction Number",
                        max_length=100,
                        verbose_name="bank transaction number",
                    ),
                ),
                (
                    "card_type",
                    models.CharField(
                        error_messages={"null": "card type cannot be null"},
                        help_text="The customer has used which medium to pay",
                        max_length=100,
                        verbose_name="card type",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        error_messages={"null": "reason cannot be null"},
                        help_text="If the transaction failed on the bank end and they send any response then you will get it here",
                        max_length=300,
                        verbose_name="reason",
                    ),
                ),
                (
                    "pg_card_risklevel",
                    models.CharField(
                        error_messages={"null": "pg card risk level cannot be null"},
                        help_text="Payment gateway card risk level (no risk = 0)",
                        max_length=100,
                        verbose_name="pg card risk level",
                    ),
                ),
                (
                    "pg_error_code_details",
                    models.CharField(
                        error_messages={"null": "pg error code details cannot be null"},
                        help_text="If payment fails in the payment gateway end then you will get the reason here",
                        max_length=100,
                        verbose_name="pg error code details",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="pg payment response",
                        verbose_name="created at",
                    ),
                ),
                (
                    "is_successful",
                    models.BooleanField(
                        default=False,
                        error_messages={"null": "payment process indication cannnot be null"},
                        help_text="Indicates whether the payment process was successful",
                        verbose_name="payment Successful",
                    ),
                ),
            ],
            options={
                "verbose_name": "PG Payment Response Log",
                "verbose_name_plural": "PG Payment Response Logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PGPaymentVerificationResponseLog",
            fields=[
                (
                    "pg_response",
                    models.OneToOneField(
                        error_messages={
                            "null": "the payment request must be provided",
                            "unique": "the request instance must be unique",
                        },
                        help_text="the pg payment request from which the response was generated",
                        on_delete=django.db.models.deletion.RESTRICT,
                        primary_key=True,
                        related_name="verification_response_from_pg_response",
                        serialize=False,
                        to="payment.pgpaymentresponselog",
                        verbose_name="pg payment response",
                    ),
                ),
                (
                    "amount_bdt",
                    models.CharField(
                        error_messages={"null": "amount bdt cannot be null"},
                        help_text="amount BDT.",
                        max_length=50,
                        verbose_name="amount bdt",
                    ),
                ),
                (
                    "status_title",
                    models.CharField(
                        error_messages={"null": "status title cannot be null"},
                        help_text="status title",
                        max_length=50,
                        verbose_name="status title",
                    ),
                ),
                (
                    "approval_code",
                    models.CharField(
                        error_messages={"null": "approval code cannot be null"},
                        help_text="approval code",
                        max_length=50,
                        verbose_name="approval code",
                    ),
                ),
                (
                    "payment_processor",
                    models.CharField(
                        error_messages={"null": "payment processor cannot be null"},
                        help_text="payment processor",
                        max_length=50,
                        verbose_name="payment processor",
                    ),
                ),
                (
                    "bank_trxid",
                    models.CharField(
                        error_messages={"null": "bank transaction id cannot be null"},
                        help_text="bank transaction id",
                        max_length=50,
                        verbose_name="bank transaction id",
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        error_messages={"null": "payment type id cannot be null"},
                        help_text="payment type",
                        max_length=50,
                        verbose_name="payment type",
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        error_messages={"null": "error code cannot be null"},
                        help_text="error code",
                        max_length=50,
                        verbose_name="error code",
                    ),
                ),
                (
                    "error_title",
                    models.CharField(
                        error_messages={"null": "error title cannot be null"},
                        help_text="error title",
                        max_length=50,
                        verbose_name="error title",
                    ),
                ),
                (
                    "date_processed",
                    models.DateTimeField(help_text="date processed", verbose_name="date processed"),
                ),
                (
                    "amount_currency",
                    models.CharField(
                        error_messages={"null": "amount currency cannot be null"},
                        help_text="amount currency",
                        max_length=50,
                        verbose_name="amount currency",
                    ),
                ),
                (
                    "rec_amount",
                    models.CharField(
                        error_messages={"null": "rec amount cannot be null"},
                        help_text="rec amount",
                        max_length=50,
                        verbose_name="rec amount",
                    ),
                ),
                (
                    "processing_ratio",
                    models.CharField(
                        error_messages={"null": "processing ratio cannot be null"},
                        help_text="processing ratio",
                        max_length=50,
                        verbose_name="processing ratio",
                    ),
                ),
                (
                    "processing_charge",
                    models.CharField(
                        error_messages={"null": "processing charge cannot be null"},
                        help_text="processing charge",
                        max_length=50,
                        verbose_name="processing charge",
                    ),
                ),
                (
                    "verify_status",
                    models.CharField(
                        error_messages={"null": "verify status cannot be null"},
                        help_text="verify status",
                        max_length=50,
                        verbose_name="verify status",
                    ),
                ),
                (
                    "checkout_status",
                    models.CharField(
                        error_messages={"null": "checkout status cannot be null"},
                        help_text="checkout status",
                        max_length=50,
                        verbose_name="checkout status",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserTransaction",
            fields=[
                (
                    "user_id",
                    models.CharField(
                        error_messages={"null": "user id cannot be null"},
                        help_text="user id",
                        max_length=50,
                        verbose_name="user id",
                    ),
                ),
                (
                    "payment_verification_response",
                    models.OneToOneField(
                        error_messages={
                            "null": "payment verification response must be provided",
                            "unique": "payment verification response must be unique",
                        },
                        help_text="the pg payment verification response",
                        on_delete=django.db.models.deletion.RESTRICT,
                        primary_key=True,
                        related_name="user_transaction_payment_verification_response",
                        serialize=False,
                        to="payment.pgpaymentverificationresponselog",
                        verbose_name="payment verification response",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="User Transaction creation timestamp",
                        null=True,
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Transaction",
                "verbose_name_plural": "User Transactions",
                "ordering": ["-created_at"],
            },
        ),
    ]
